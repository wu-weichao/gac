#!/bin/bash

# GAC (Git AI Commit) - 全局安装脚本
# 支持 Linux, macOS

set -e

GAC_VERSION="v1.0.0"
INSTALL_DIR="$HOME/.gac"
BIN_DIR="$HOME/.local/bin"
CONFIG_FILE="$INSTALL_DIR/config.json"

# 颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检测操作系统和架构
detect_platform() {
    local os
    local arch
    
    case "$(uname -s)" in
        Linux*)     os=linux;;
        Darwin*)    os=darwin;;
        MINGW*)     os=windows;;
        MSYS*)      os=windows;;
        *)          log_error "Unsupported OS: $(uname -s)"; exit 1;;
    esac
    
    case "$(uname -m)" in
        x86_64)     arch=amd64;;
        arm64)      arch=arm64;;
        aarch64)    arch=arm64;;
        *)          log_error "Unsupported architecture: $(uname -m)"; exit 1;;
    esac
    
    echo "${os}_${arch}"
}

# 检查依赖
check_dependencies() {
    if ! command -v git &> /dev/null; then
        log_error "Git is not installed. Please install Git first."
        exit 1
    fi
    
    if command -v go &> /dev/null; then
        log_info "Go detected, will build from source"
        return 0
    else
        log_info "Go not detected, will download pre-built binary"
        return 1
    fi
}

# 从源码构建
build_from_source() {
    log_info "Building GAC from source..."
    
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    # 这里应该是从 git 仓库克隆，现在用本地源码
    if [ -d "$(dirname "$0")/src" ]; then
        cp -r "$(dirname "$0")/src"/* .
    else
        log_error "Source code not found"
        exit 1
    fi
    
    go mod tidy
    go build -ldflags "-s -w" -o gac-core main.go
    
    mkdir -p "$BIN_DIR"
    cp gac-core "$BIN_DIR/"
    chmod +x "$BIN_DIR/gac-core"
    
    rm -rf "$temp_dir"
    log_info "Built and installed gac-core to $BIN_DIR/gac-core"
}

# 下载预构建二进制文件
download_binary() {
    local platform=$(detect_platform)
    local binary_url="https://github.com/your-repo/gac/releases/download/${GAC_VERSION}/gac-core_${platform}"
    
    log_info "Downloading GAC binary for $platform..."
    
    mkdir -p "$BIN_DIR"
    
    if command -v curl &> /dev/null; then
        curl -fsSL "$binary_url" -o "$BIN_DIR/gac-core"
    elif command -v wget &> /dev/null; then
        wget -q "$binary_url" -O "$BIN_DIR/gac-core"
    else
        log_error "Neither curl nor wget found. Please install one of them."
        exit 1
    fi
    
    chmod +x "$BIN_DIR/gac-core"
    log_info "Downloaded and installed gac-core to $BIN_DIR/gac-core"
}

# 创建默认配置文件
create_config() {
    mkdir -p "$INSTALL_DIR"
    
    if [ ! -f "$CONFIG_FILE" ]; then
        cat > "$CONFIG_FILE" << EOF
{
  "llm": {
    "provider": "openai",
    "api_key": "",
    "endpoint": "https://api.openai.com/v1/chat/completions",
    "model": "gpt-3.5-turbo"
  }
}
EOF
        log_info "Created default configuration at $CONFIG_FILE"
    else
        log_info "Configuration file already exists at $CONFIG_FILE"
    fi
}

# 配置 PATH
setup_path() {
    local shell_rc=""
    
    if [ -n "$BASH_VERSION" ]; then
        shell_rc="$HOME/.bashrc"
    elif [ -n "$ZSH_VERSION" ]; then
        shell_rc="$HOME/.zshrc"
    else
        shell_rc="$HOME/.profile"
    fi
    
    if ! echo "$PATH" | grep -q "$BIN_DIR"; then
        echo "export PATH=\"$BIN_DIR:\$PATH\"" >> "$shell_rc"
        log_info "Added $BIN_DIR to PATH in $shell_rc"
        log_warn "Please run 'source $shell_rc' or restart your terminal"
    fi
}

# 安装 Git Hook 到项目
install_hook() {
    if [ ! -d ".git" ]; then
        log_warn "Not in a Git repository. Skipping hook installation."
        log_info "Run 'gac install' in any Git repository to set up the hook."
        return
    fi
    
    local hook_file=".git/hooks/prepare-commit-msg"
    
    mkdir -p .git/hooks
    
    cat > "$hook_file" << 'EOF'
#!/bin/sh
# GAC (Git AI Commit) Hook
# Generated by GAC installer

# 检查是否在 PATH 中
if command -v gac-core >/dev/null 2>&1; then
    gac-core "$1"
elif [ -x "$HOME/.local/bin/gac-core" ]; then
    "$HOME/.local/bin/gac-core" "$1"
else
    echo "GAC not found in PATH. Please check installation." >&2
    exit 0
fi
EOF
    
    chmod +x "$hook_file"
    log_info "Installed Git hook in current repository"
}

# 主安装流程
main() {
    log_info "Installing GAC (Git AI Commit)..."
    
    if check_dependencies; then
        build_from_source
    else
        download_binary
    fi
    
    create_config
    setup_path
    install_hook
    
    log_info "GAC installation completed!"
    log_info ""
    log_info "Next steps:"
    log_info "1. Set your API key: export GAC_API_KEY=your-api-key"
    log_info "2. Or edit config file: $CONFIG_FILE"
    log_info "3. In any Git repo, run: gac install (to set up the hook)"
    log_info "4. Make some changes, stage them, and commit!"
}

main "$@"